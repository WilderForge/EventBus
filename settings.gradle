pluginManagement {
    repositories {
        gradlePluginPortal()
        maven { url = 'https://maven.minecraftforge.net/' }
    }
}

plugins {
    id 'org.gradle.toolchains.foojay-resolver-convention' version '0.9.0'
}

def parseToml(file) {
    def map = [:]
    if (!file.exists()) {
        println "TOML file not found: ${file}"
        return map
    }

    def currentSection = null
    println "Reading TOML file: ${file}"
    
    file.eachLine { line ->
        line = line.trim()
        if (line.startsWith("[") && line.endsWith("]")) {
            currentSection = line[1..-2] // Extract section name
            map[currentSection] = [:]
            println "Parsing section: [${currentSection}]"
        } else if (currentSection && line.contains("=")) {
            def (key, value) = line.split("=", 2)*.trim()
            value = value.replaceAll('^"|"$', '') // Remove surrounding quotes

            if (value.startsWith("{") && value.endsWith("}")) {
                // Convert inline maps (e.g., { module = "...", version.ref = "..." })
                def keyValues = [:]
                value[1..-2].split(",").each { entry ->
                    def (k, v) = entry.split("=").collect { it.trim().replaceAll('^"|"$', '') }
                    keyValues[k] = v
                }
                map[currentSection][key] = keyValues
                println "  -> Found library: ${key} -> ${keyValues}"
            } else {
                map[currentSection][key] = value
                println "  -> Found version: ${key} = ${value}"
            }
        }
    }
    return map
}

def versionCatalogFile = file("${rootDir}/gradle/libs.versions.toml")
def parsedToml = parseToml(versionCatalogFile)

def versions = parsedToml.versions ?: [:]
def libraries = parsedToml.libraries ?: [:]
def bundles = parsedToml.bundles ?: [:]

println "\n--- Parsed Versions ---"
versions.each { key, value -> println "${key} = ${value}" }

println "\n--- Parsed Libraries ---"
libraries.each { key, value -> println "${key} -> ${value}" }

println "\n--- Parsed Bundles ---"
bundles.each { key, value -> println "${key} = ${value}" }

dependencyResolutionManagement {
    versionCatalogs {
        libs {
        	library('log4j-api', 'org.apache.logging.log4j:log4j-api:2.17.1')
            println "\n--- Registering Libraries ---"
            libraries.each { name, details ->
                if (details instanceof Map && details.containsKey('module') && details.containsKey('version.ref')) {
                    def versionKey = details['version.ref']
                    def version = versions[versionKey]
                    if (version) {
                        println "  ✅ Adding library: ${name} -> ${details.module}:${version}"
                        library(name, "${details.module}:${version}")
                    } else {
                        println "  ❌ Missing version for ${name} (version.ref: ${versionKey})"
                    }
                } else {
                    println "  ❌ Skipping ${name}, invalid format: ${details}"
                }
            }

            println "\n--- Registering Bundles ---"
            bundles.each { name, bundleDeps ->
                def dependencies = bundleDeps.replaceAll("[\\[\\]\"]", "").split(",").collect { it.trim() }
                println "  ✅ Adding bundle: ${name} -> ${dependencies}"
                bundle(name, dependencies)
            }
        }
    }
}

enableFeaturePreview 'TYPESAFE_PROJECT_ACCESSORS'

rootProject.name = 'EventBus'
include 'eventbus-jmh'
include 'eventbus-test'
include 'eventbus-test-jar'
if (file('eventbus-wrapper').exists())
    include 'eventbus-wrapper'